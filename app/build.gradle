apply plugin: 'android-sdk-manager'
apply plugin: 'com.android.application'

android {
    compileSdkVersion 21
    buildToolsVersion "21.1.2"

    defaultConfig {
        applicationId "io.tony.arcaretrofit"
        minSdkVersion 16
        targetSdkVersion 21
        versionCode 1
        versionName "1.0"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        disable 'InvalidPackage'
        abortOnError false
    }

    packagingOptions {
        exclude 'META-INF/services/javax.annotation.processing.Processor'
    }

    sourceSets {
        main {
            manifest.srcFile 'src/main/AndroidManifest.xml'
            res.srcDirs = ['src/main/res']
            assets.srcDirs = ['src/main/assets']
        }
    }
}

apply plugin: 'android-unit-test'

androidUnitTest {

    testTasks {
        all {
            // configure the set of classes for JUnit tests
            // configure max heap size of the test JVM
            maxHeapSize = '2048m'

            // configure the test JVM arguments
            jvmArgs '-XX:MaxPermSize=512m', '-XX:-UseSplitVerifier'

            // Specify max number of processes (default is 1)
            maxParallelForks = 4

            // Specify max number of test classes to execute in a test process
            // before restarting the process (default is unlimited)
            forkEvery = 1
        }
    }
}

//Provides a nice output at the end of each test
gradle.projectsEvaluated {
    tasks.withType(Test) { task ->
        task.afterTest { desc, result ->
            println "Executing test ${desc.name} [${desc.className}] with result: ${result.resultType}"
        }
    }
}

//Ensures that the classes are generated for the Robolectric tests
tasks.findByName("assembleDebug").dependsOn("testDebugClasses")

apply plugin: 'idea'

idea {
    module {
        testOutputDir = file('build/test-classes/debug')
        downloadJavadoc = true
        downloadSources = true
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:appcompat-v7:21.0.3@aar'
    compile ('io.pivotal:arca:1.0-beta.4-SNAPSHOT') {
        exclude(module: 'support-v4')
    }
    compile 'com.squareup.retrofit:retrofit:1.9.0'
    compile 'com.jakewharton:butterknife:6.1.0'
    compile 'com.squareup.picasso:picasso:2.5.0'
    compile 'com.squareup.okhttp:okhttp-urlconnection:2.2.0'
    compile 'com.squareup.okhttp:okhttp:2.2.0'

    testCompile 'org.mockito:mockito-core:1.10.8'
    testCompile 'org.robolectric:android-all:4.3_r2-robolectric-0'
    testCompile('org.robolectric:robolectric:2.4') {
        exclude(module: 'classworlds')
        exclude(module: 'commons-logging')
        exclude(module: 'httpclient')
        exclude(module: 'maven-artifact')
        exclude(module: 'maven-artifact-manager')
        exclude(module: 'maven-error-diagnostics')
        exclude(module: 'maven-model')
        exclude(module: 'maven-project')
        exclude(module: 'maven-settings')
        exclude(module: 'plexus-container-default')
        exclude(module: 'plexus-interpolation')
        exclude(module: 'plexus-utils')
        exclude(module: 'wagon-file')
        exclude(module: 'wagon-http-lightweight')
        exclude(module: 'wagon-provider-api')
    }
    testCompile('com.squareup:fest-android:1.0.8') {
        exclude(module: 'support-v4')
    }
    testCompile('com.squareup.okhttp:mockwebserver:2.1.0') {
        exclude(module: 'support-v4')
    }
    testCompile('junit:junit:4.11') {
        exclude(group: 'org.hamcrest')
    }
}
